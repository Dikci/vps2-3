#!/bin/bash

LOG_FILE="/var/log/monitoring.log"
LAST_CLEAR_FILE="/tmp/last_log_clear"
GAIANET_PATH="/root/gaianet/bin/gaianet"

log() {
    local message="$1"
    echo "[$(date)] $message" | tee -a "$LOG_FILE"
}

clear_log_daily() {
    local now=$(date +%s)
    local last_clear=0

    [[ -f "$LAST_CLEAR_FILE" ]] && last_clear=$(cat "$LAST_CLEAR_FILE")

    if (( now - last_clear >= 86400 )); then
        log "üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ $LOG_FILE..."
        > "$LOG_FILE"
        echo "$now" > "$LAST_CLEAR_FILE"
        log "‚úÖ –õ–æ–≥-—Ñ–∞–π–ª –æ—á–∏—â–µ–Ω."
    fi
}

check_and_create_tmux_session_gensyn() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ gensyn..."
    if ! tmux has-session -t gensyn 2>/dev/null; then
        log "‚ö†Ô∏è –°–µ—Å—Å–∏—è tmux 'gensyn' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é..."
        tmux new-session -d -s gensyn "cd rl-swarm && ./run_rl_swarm.sh; bash"
        log "‚úÖ –°–µ—Å—Å–∏—è 'gensyn' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞."
    else
        log "‚úÖ –°–µ—Å—Å–∏—è 'gensyn' —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    fi
}

check_and_create_tmux_session_nexus() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ nexus..."
    if ! tmux has-session -t nexus 2>/dev/null; then
        log "‚ö†Ô∏è –°–µ—Å—Å–∏—è tmux 'nexus' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é..."
        tmux new-session -d -s nexus "docker stop nexus && docker rm nexus && source /etc/environment && docker run -it --init --name nexus nexusxyz/nexus-cli:latest start --node-id $ID; bash"
        log "‚úÖ –°–µ—Å—Å–∏—è 'nexus' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞."
    else
        log "‚úÖ –°–µ—Å—Å–∏—è 'nexus' —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    fi
}

check_and_create_tmux_session_datagram() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ datagram..."
    if ! tmux has-session -t datagram 2>/dev/null; then
        log "‚ö†Ô∏è –°–µ—Å—Å–∏—è tmux 'datagram' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é..."
        tmux new-session -d -s datagram "source /etc/environment && ./datagram-cli-x86_64-linux run -- -key $DATAGRAM; bash"
        log "‚úÖ –°–µ—Å—Å–∏—è 'datagram' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞."
    else
        log "‚úÖ –°–µ—Å—Å–∏—è 'datagram' —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    fi
}

check_and_create_tmux_session_dawn() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ dawn..."
    if ! tmux has-session -t dawn 2>/dev/null; then
        log "‚ö†Ô∏è –°–µ—Å—Å–∏—è tmux 'dawn' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é..."
        tmux new-session -d -s dawn "cd The-Dawn-Bot && python3 -m venv venv && source venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt && python run.py; bash"
        log "‚úÖ –°–µ—Å—Å–∏—è 'dawn' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞."
    else
        log "‚úÖ –°–µ—Å—Å–∏—è 'dawn' —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    fi
}

check_and_create_tmux_session_dria() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ dria..."
    if ! tmux has-session -t dria 2>/dev/null; then
        log "‚ö†Ô∏è –°–µ—Å—Å–∏—è tmux 'dria' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é..."
        tmux new-session -d -s dria "/root/.dria/bin/dkn-compute-launcher start; bash"
        log "‚úÖ –°–µ—Å—Å–∏—è tmux 'dria' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."
    else
        log "‚úÖ –°–µ—Å—Å–∏—è tmux 'dria' —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    fi
}

check_multiple_status() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Multiple..."
    cd ~/multipleforlinux || { log "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ ~/multipleforlinux"; return; }

    local status_output
    status_output=$(timeout 60s ./multiple-cli status)

    if [[ $? -eq 124 ]]; then
        log "‚ùå –û—à–∏–±–∫–∞: multiple-cli status –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 60 —Å–µ–∫."
        return
    fi

    if [[ $status_output != *"Node Statistical"* ]]; then
        log "‚ö†Ô∏è multiple-node –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é..."
        nohup ./multiple-node > output.log 2>&1 &
        log "‚úÖ multiple-node –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."
    else
        log "‚úÖ multiple-node —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    fi
}

check_docker_containers() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–¥–µ–º–æ–Ω–∞..."
    if ! systemctl is-active --quiet docker; then
        log "‚ö†Ô∏è Docker-–¥–µ–º–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–ø—É—Å–∫–∞—é..."
        systemctl start docker
        sleep 5
        if ! systemctl is-active --quiet docker; then
            log "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker-–¥–µ–º–æ–Ω!"
            return
        fi
        log "‚úÖ Docker-–¥–µ–º–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."
    fi

    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    local non_up_containers
    non_up_containers=$(docker ps -a --filter "status=exited" --filter "status=created" --filter "status=paused" --format "{{.ID}} {{.Names}}")

    if [[ -n "$non_up_containers" ]]; then
        log "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        echo "$non_up_containers" | awk '{print $2}' | tee -a "$LOG_FILE"

        while IFS= read -r container; do
            local container_id container_name
            container_id=$(echo "$container" | awk '{print $1}')
            container_name=$(echo "$container" | awk '{print $2}')
            log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container_name..."
            docker restart "$container_id" >> "$LOG_FILE" 2>&1
            log "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container_name' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
        done <<< "$non_up_containers"
    else
        log "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç."
    fi
}

check_services() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd-—Å–µ—Ä–≤–∏—Å–æ–≤..."
    local services
    services=$(systemctl list-units --type=service --state=failed --no-pager --no-legend | awk '{print $1}' | grep -v '^‚óè')

    if [[ -z "$services" ]]; then
        log "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        return
    fi

    log "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    log "$services"

    while read -r service; do
        [[ -z "$service" ]] && continue
        log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: $service..."
        systemctl restart "$service" >> "$LOG_FILE" 2>&1

        local new_status
        new_status=$(systemctl is-active "$service")
        if [[ "$new_status" == "active" ]]; then
            log "‚úÖ –°–µ—Ä–≤–∏—Å '$service' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
        else
            log "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å '$service' –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å (–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: $new_status)."
        fi
    done <<< "$services"
}

check_gaianet_node() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ gaianet (–ø–æ—Ä—Ç 8080)..."

    if ! nc -z localhost 8080 >/dev/null 2>&1; then
        log "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å gaias –Ω–∞ –ø–æ—Ä—Ç—É 8080 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é gaianet..."

        log "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ gaianet..."
        $GAIANET_PATH stop >> "$LOG_FILE" 2>&1 || log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ gaianet."

        sleep 2

        log "üîÑ –ó–∞–ø—É—Å–∫ gaianet..."
        $GAIANET_PATH start >> "$LOG_FILE" 2>&1 || log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ gaianet."

        if nc -z localhost 8080 >/dev/null 2>&1; then
            log "‚úÖ gaianet —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
        else
            log "‚ùå –û—à–∏–±–∫–∞: gaianet –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å."
        fi
    else
        log "‚úÖ –°–µ—Ä–≤–∏—Å gaias –Ω–∞ –ø–æ—Ä—Ç—É 8080 —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    fi
}

while true; do
    log "üü¢ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    clear_log_daily

    check_and_create_tmux_session_dria
    check_and_create_tmux_session_gensyn
    check_and_create_tmux_session_nexus
    check_and_create_tmux_session_datagram
    check_and_create_tmux_session_dawn
    check_multiple_status
    check_docker_containers
    check_services
    check_gaianet_node

    log "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π..."
    sleep 250
done
